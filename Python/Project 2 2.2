from datetime import datetime, timedelta

class Library:
    def __init__(self):
        self.catalog = {
            1: {"title": "To Kill a Mockingbird", "author": "Harper Lee", "quantity": 5},
            2: {"title": "1984", "author": "George Orwell", "quantity": 3},
            3: {"title": "The Great Gatsby", "author": "F. Scott Fitzgerald", "quantity": 2},
            4: {"title": "Pride and Prejudice", "author": "Jane Austen", "quantity": 4}
        }
        self.users = {}
        self.transactions = {}

    def display_catalog(self):
        print("Catalog:")
        for book_id, book_info in self.catalog.items():
            print(f"ID: {book_id}, Title: {book_info['title']}, Author: {book_info['author']}, Quantity: {book_info['quantity']}")

    def register_user(self, user_id, name):
        if user_id not in self.users:
            self.users[user_id] = {"name": name, "checked_out_books": {}, "fine": 0}
            print(f"User '{name}' registered successfully!")
        else:
            print("User ID already exists. Please choose a different ID.")

    def checkout_book(self, user_id, book_id):
        if user_id not in self.users:
            print("User does not exist. Please register first.")
            return
        if book_id not in self.catalog:
            print("Book does not exist.")
            return
        if self.catalog[book_id]["quantity"] == 0:
            print("Book is not available.")
            return
        if len(self.users[user_id]["checked_out_books"]) >= 3:
            print("User has reached the maximum limit of checked-out books.")
            return

        checkout_date = datetime.now()
        due_date = checkout_date + timedelta(days=14)
        self.transactions[(user_id, book_id)] = {"checkout_date": checkout_date, "due_date": due_date}
        self.catalog[book_id]["quantity"] -= 1
        self.users[user_id]["checked_out_books"][book_id] = checkout_date
        print("Book checked out successfully.")

    def return_book(self, user_id, book_id):
        if user_id not in self.users:
            print("User does not exist.")
            return
        if book_id not in self.catalog:
            print("Book does not exist.")
            return
        if book_id not in self.users[user_id]["checked_out_books"]:
            print("Book was not checked out by this user.")
            return

        checkout_date = self.users[user_id]["checked_out_books"].pop(book_id)
        transaction_key = (user_id, book_id)
        if transaction_key in self.transactions:
            due_date = self.transactions[transaction_key]["due_date"]
            if datetime.now() > due_date:
                days_overdue = (datetime.now() - due_date).days
                fine = days_overdue * 1
                self.users[user_id]["fine"] += fine
                print(f"Book returned successfully. Overdue fine: ${fine}")
            else:
                print("Book returned successfully.")
            del self.transactions[transaction_key]
        else:
            print("No transaction found for this book.")
        self.catalog[book_id]["quantity"] += 1

    def list_overdue_books(self, user_id):
        if user_id not in self.users:
            print("User does not exist.")
            return
        overdue_books = []
        total_fine = 0
        for (u_id, b_id), transaction_info in self.transactions.items():
            if u_id == user_id and datetime.now() > transaction_info["due_date"]:
                overdue_books.append(b_id)
                days_overdue = (datetime.now() - transaction_info["due_date"]).days
                fine = days_overdue * 1
                total_fine += fine
        if overdue_books:
            print("Overdue Books:")
            for book_id in overdue_books:
                print(f"ID: {book_id}, Title: {self.catalog[book_id]['title']}, Author: {self.catalog[book_id]['author']}")
            print(f"Total Fine: ${total_fine}")
        else:
            print("No overdue books.")

# Create Library instance
library = Library()

# User Interface
while True:
    print("\n1. Display Catalog")
    print("2. Register User")
    print("3. Checkout Book")
    print("4. Return Book")
    print("5. List Overdue Books")
    print("6. Exit")
    
    choice = input("Enter your choice: ")

    if choice == "1":
        library.display_catalog()
    elif choice == "2":
        user_id = int(input("Enter User ID: "))
        name = input("Enter User Name: ")
        library.register_user(user_id, name)
    elif choice == "3":
        user_id = int(input("Enter User ID: "))
        book_id = int(input("Enter Book ID to checkout: "))
        library.checkout_book(user_id, book_id)
    elif choice == "4":
        user_id = int(input("Enter User ID: "))
        book_id = int(input("Enter Book ID to return: "))
        library.return_book(user_id, book_id)
    elif choice == "5":
        user_id = int(input("Enter User ID: "))
        library.list_overdue_books(user_id)
    elif choice == "6":
        print("Exiting...")
        break
    else:
        print("Invalid choice. Please try again.")


